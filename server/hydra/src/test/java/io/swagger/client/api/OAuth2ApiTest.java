/*
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AcceptConsentRequest;
import io.swagger.client.model.AcceptLoginRequest;
import io.swagger.client.model.CompletedRequest;
import io.swagger.client.model.ConsentRequest;
import io.swagger.client.model.FlushInactiveOAuth2TokensRequest;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.JsonWebKeySet;
import io.swagger.client.model.LoginRequest;
import io.swagger.client.model.OAuth2Client;
import io.swagger.client.model.OAuth2TokenIntrospection;
import io.swagger.client.model.OauthTokenResponse;
import io.swagger.client.model.RejectRequest;
import io.swagger.client.model.UserinfoResponse;
import io.swagger.client.model.WellKnown;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OAuth2Api
 */
@Ignore
public class OAuth2ApiTest {

    private final OAuth2Api api = new OAuth2Api();

    
    /**
     * Accept an consent request
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptConsentRequestTest() throws ApiException {
        String challenge = null;
        AcceptConsentRequest body = null;
        CompletedRequest response = api.acceptConsentRequest(challenge, body);

        // TODO: test validations
    }
    
    /**
     * Accept an login request
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has successfully authenticated and includes additional information such as the user&#39;s ID and if ORY Hydra should remember the user&#39;s user agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptLoginRequestTest() throws ApiException {
        String challenge = null;
        AcceptLoginRequest body = null;
        CompletedRequest response = api.acceptLoginRequest(challenge, body);

        // TODO: test validations
    }
    
    /**
     * Create an OAuth 2.0 client
     *
     * Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuth2ClientTest() throws ApiException {
        OAuth2Client body = null;
        OAuth2Client response = api.createOAuth2Client(body);

        // TODO: test validations
    }
    
    /**
     * Deletes an OAuth 2.0 Client
     *
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuth2ClientTest() throws ApiException {
        String id = null;
        api.deleteOAuth2Client(id);

        // TODO: test validations
    }
    
    /**
     * Flush Expired OAuth2 Access Tokens
     *
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flushInactiveOAuth2TokensTest() throws ApiException {
        FlushInactiveOAuth2TokensRequest body = null;
        api.flushInactiveOAuth2Tokens(body);

        // TODO: test validations
    }
    
    /**
     * Get consent request information
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentRequestTest() throws ApiException {
        String challenge = null;
        ConsentRequest response = api.getConsentRequest(challenge);

        // TODO: test validations
    }
    
    /**
     * Get an login request
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoginRequestTest() throws ApiException {
        String challenge = null;
        LoginRequest response = api.getLoginRequest(challenge);

        // TODO: test validations
    }
    
    /**
     * Get an OAuth 2.0 Client.
     *
     * Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOAuth2ClientTest() throws ApiException {
        String id = null;
        OAuth2Client response = api.getOAuth2Client(id);

        // TODO: test validations
    }
    
    /**
     * Server well known configuration
     *
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWellKnownTest() throws ApiException {
        WellKnown response = api.getWellKnown();

        // TODO: test validations
    }
    
    /**
     * Introspect OAuth2 tokens
     *
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void introspectOAuth2TokenTest() throws ApiException {
        String token = null;
        String scope = null;
        OAuth2TokenIntrospection response = api.introspectOAuth2Token(token, scope);

        // TODO: test validations
    }
    
    /**
     * List OAuth 2.0 Clients
     *
     * This endpoint lists all clients in the database, and never returns client secrets.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOAuth2ClientsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        List<OAuth2Client> response = api.listOAuth2Clients(limit, offset);

        // TODO: test validations
    }
    
    /**
     * The OAuth 2.0 authorize endpoint
     *
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oauthAuthTest() throws ApiException {
        api.oauthAuth();

        // TODO: test validations
    }
    
    /**
     * The OAuth 2.0 token endpoint
     *
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oauthTokenTest() throws ApiException {
        OauthTokenResponse response = api.oauthToken();

        // TODO: test validations
    }
    
    /**
     * Reject an consent request
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectConsentRequestTest() throws ApiException {
        String challenge = null;
        RejectRequest body = null;
        CompletedRequest response = api.rejectConsentRequest(challenge, body);

        // TODO: test validations
    }
    
    /**
     * Reject an logout request
     *
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectLoginRequestTest() throws ApiException {
        String challenge = null;
        RejectRequest body = null;
        CompletedRequest response = api.rejectLoginRequest(challenge, body);

        // TODO: test validations
    }
    
    /**
     * Revoke OAuth2 tokens
     *
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeOAuth2TokenTest() throws ApiException {
        String token = null;
        api.revokeOAuth2Token(token);

        // TODO: test validations
    }
    
    /**
     * Update an OAuth 2.0 Client
     *
     * Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOAuth2ClientTest() throws ApiException {
        String id = null;
        OAuth2Client body = null;
        OAuth2Client response = api.updateOAuth2Client(id, body);

        // TODO: test validations
    }
    
    /**
     * OpenID Connect Userinfo
     *
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 access token. The endpoint implements http://openid.net/specs/openid-connect-core-1_0.html#UserInfo .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userinfoTest() throws ApiException {
        UserinfoResponse response = api.userinfo();

        // TODO: test validations
    }
    
    /**
     * Get Well-Known JSON Web Keys
     *
     * Returns metadata for discovering important JSON Web Keys. Currently, this endpoint returns the public key for verifying OpenID Connect ID Tokens.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wellKnownTest() throws ApiException {
        JsonWebKeySet response = api.wellKnown();

        // TODO: test validations
    }
    
}
